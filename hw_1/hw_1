#!/usr/bin/env python2

import gurobipy as g
import sys

if len(sys.argv) > 2:
    input_file = sys.argv[1]
    output_file = sys.argv[2]

file_object = open(input_file, "r")

model = g.Model()

c = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
x = [model.addVar(lb=0, vtype=g.GRB.INTEGER) for i in c]
z = [model.addVar(lb=0, vtype=g.GRB.INTEGER) for k in c]
model.update()
d = map(int, file_object.read().split(" "))

model.setObjective(g.quicksum([x_i*hour for x_i, hour in zip(z, c)]), sense=g.GRB.MINIMIZE)

for i in range(0, 24):
    model.addConstr(d[i] - (g.quicksum(x[j % 24] for j in range(i-7, i+1))) <= z[i])
    model.addConstr((g.quicksum(x[j % 24] for j in range(i-7, i+1))) - d[i] <= z[i])

model.optimize()

if model.Status == g.GRB.OPTIMAL:
    obj = model.objVal
    result = map(int, [v.x for v in x])
    output_file = open(output_file, 'w+')
    output_file.write(str(int(obj)) + "\n")
    output_file.write(" ".join(map(str, result)))
    print(int(obj))
    print " ".join(map(str, result))
else:
    print("No feasible solution found")

